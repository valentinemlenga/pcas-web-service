.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.35
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "docs::api::APR::ThreadMutex 3"
.TH docs::api::APR::ThreadMutex 3 "2007-11-12" "perl v5.8.9" "User Contributed Perl Documentation"
.SH "NAME"
APR::ThreadMutex \- Perl API for APR thread mutexes
.SH "Synopsis"
.IX Header "Synopsis"
.Vb 1
\&  use APR::ThreadMutex ();
.Ve
.PP
.Vb 4
\&  my $mutex = APR::ThreadMutex->new($r->pool);
\&  $mutex->lock;
\&  $mutex->unlock;
\&  $mutex->trylock;
.Ve
.SH "Description"
.IX Header "Description"
\&\f(CW\*(C`APR::ThreadMutex\*(C'\fR interfaces \s-1APR\s0 thread mutexes.
.SH "API"
.IX Header "API"
\&\f(CW\*(C`APR::ThreadMutex\*(C'\fR provides the following functions and/or methods:
.SH "Unsupported API"
.IX Header "Unsupported API"
\&\f(CW\*(C`APR::ThreadMutex\*(C'\fR also provides auto-generated Perl interface for a
few other methods which aren't tested at the moment and therefore
their \s-1API\s0 is a subject to change. These methods will be finalized
later as a need arises. If you want to rely on any of the following
methods please contact the the mod_perl development mailing list so we can help each other take the steps necessary
to shift the method to an officially supported \s-1API\s0.
.ie n .Sh """DESTROY"""
.el .Sh "\f(CWDESTROY\fP"
.IX Subsection "DESTROY"
\&\s-1META:\s0 Autogenerated \- needs to be reviewed/completed
.PP
Destroy the mutex and free the memory associated with the lock.
.PP
.Vb 1
\&  $mutex->DESTROY();
.Ve
.ie n .IP "obj: $mutex\fR ( \f(CW""APR::ThreadMutex object"" )" 4
.el .IP "obj: \f(CW$mutex\fR ( \f(CWAPR::ThreadMutex object\fR )" 4
.IX Item "obj: $mutex ( APR::ThreadMutex object )"
the mutex to destroy.
.IP "ret: no return value" 4
.IX Item "ret: no return value"
.PD 0
.IP "since: subject to change" 4
.IX Item "since: subject to change"
.PD
.ie n .Sh """lock"""
.el .Sh "\f(CWlock\fP"
.IX Subsection "lock"
\&\s-1META:\s0 Autogenerated \- needs to be reviewed/completed
.PP
Acquire the lock for the given mutex. If the mutex is already locked,
the current thread will be put to sleep until the lock becomes available.
.PP
.Vb 1
\&  $ret = $mutex->lock();
.Ve
.ie n .IP "obj: $mutex\fR ( \f(CW""APR::ThreadMutex object"" )" 4
.el .IP "obj: \f(CW$mutex\fR ( \f(CWAPR::ThreadMutex object\fR )" 4
.IX Item "obj: $mutex ( APR::ThreadMutex object )"
the mutex on which to acquire the lock.
.ie n .IP "ret: $ret ( integer )" 4
.el .IP "ret: \f(CW$ret\fR ( integer )" 4
.IX Item "ret: $ret ( integer )"
.PD 0
.IP "since: subject to change" 4
.IX Item "since: subject to change"
.PD
.ie n .Sh """new"""
.el .Sh "\f(CWnew\fP"
.IX Subsection "new"
Create a new mutex
.PP
.Vb 1
\&  my $mutex = APR::ThreadMutex->new($p);
.Ve
.ie n .IP "obj: ""APR::ThreadMutex"" ( class name )" 4
.el .IP "obj: \f(CWAPR::ThreadMutex\fR ( class name )" 4
.IX Item "obj: APR::ThreadMutex ( class name )"
.PD 0
.ie n .IP "arg1: $p\fR ( \f(CW""APR::Pool object"" )" 4
.el .IP "arg1: \f(CW$p\fR ( \f(CWAPR::Pool object\fR )" 4
.IX Item "arg1: $p ( APR::Pool object )"
.ie n .IP "ret: $mutex\fR ( \f(CW""APR::ThreadMutex object"" )" 4
.el .IP "ret: \f(CW$mutex\fR ( \f(CWAPR::ThreadMutex object\fR )" 4
.IX Item "ret: $mutex ( APR::ThreadMutex object )"
.IP "since: subject to change" 4
.IX Item "since: subject to change"
.PD
.ie n .Sh """pool_get"""
.el .Sh "\f(CWpool_get\fP"
.IX Subsection "pool_get"
\&\s-1META:\s0 Autogenerated \- needs to be reviewed/completed
.PP
\&\s-1META:\s0 should probably be renamed to \fIpool()\fR, like all other pool
accessors
.PP
Get the pool used by this thread_mutex.
.PP
.Vb 1
\&  $ret = $obj->pool_get();
.Ve
.ie n .IP "obj: $obj\fR ( \f(CW""APR::ThreadMutex object"" )" 4
.el .IP "obj: \f(CW$obj\fR ( \f(CWAPR::ThreadMutex object\fR )" 4
.IX Item "obj: $obj ( APR::ThreadMutex object )"
.PD 0
.ie n .IP "ret: $ret\fR ( \f(CW""APR::Pool object"" )" 4
.el .IP "ret: \f(CW$ret\fR ( \f(CWAPR::Pool object\fR )" 4
.IX Item "ret: $ret ( APR::Pool object )"
.PD
apr_pool_t the pool
.IP "since: subject to change" 4
.IX Item "since: subject to change"
.ie n .Sh """trylock"""
.el .Sh "\f(CWtrylock\fP"
.IX Subsection "trylock"
\&\s-1META:\s0 Autogenerated \- needs to be reviewed/completed
.PP
Attempt to acquire the lock for the given mutex. If the mutex has already
been acquired, the call returns immediately with \s-1APR_EBUSY\s0. Note: it
is important that the \s-1APR_STATUS_IS_EBUSY\s0(s) macro be used to determine
if the return value was \s-1APR_EBUSY\s0, for portability reasons.
.PP
.Vb 1
\&  $ret = $mutex->trylock();
.Ve
.ie n .IP "obj: $mutex\fR ( \f(CW""APR::ThreadMutex object"" )" 4
.el .IP "obj: \f(CW$mutex\fR ( \f(CWAPR::ThreadMutex object\fR )" 4
.IX Item "obj: $mutex ( APR::ThreadMutex object )"
the mutex on which to attempt the lock acquiring.
.ie n .IP "ret: $ret (integer)" 4
.el .IP "ret: \f(CW$ret\fR (integer)" 4
.IX Item "ret: $ret (integer)"
.PD 0
.IP "since: subject to change" 4
.IX Item "since: subject to change"
.PD
.ie n .Sh """unlock"""
.el .Sh "\f(CWunlock\fP"
.IX Subsection "unlock"
\&\s-1META:\s0 Autogenerated \- needs to be reviewed/completed
.PP
Release the lock for the given mutex.
.PP
.Vb 1
\&  $ret = $mutex->unlock();
.Ve
.ie n .IP "obj: $mutex\fR ( \f(CW""APR::ThreadMutex object"" )" 4
.el .IP "obj: \f(CW$mutex\fR ( \f(CWAPR::ThreadMutex object\fR )" 4
.IX Item "obj: $mutex ( APR::ThreadMutex object )"
the mutex from which to release the lock.
.ie n .IP "ret: $ret ( integer )" 4
.el .IP "ret: \f(CW$ret\fR ( integer )" 4
.IX Item "ret: $ret ( integer )"
.PD 0
.IP "since: subject to change" 4
.IX Item "since: subject to change"
.PD
.SH "See Also"
.IX Header "See Also"
mod_perl 2.0 documentation.
.SH "Copyright"
.IX Header "Copyright"
mod_perl 2.0 and its core modules are copyrighted under
The Apache Software License, Version 2.0.
.SH "Authors"
.IX Header "Authors"
The mod_perl development team and numerous contributors.
