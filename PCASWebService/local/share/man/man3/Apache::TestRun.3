.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.35
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Apache::TestRun 3"
.TH Apache::TestRun 3 "2008-02-25" "perl v5.8.9" "User Contributed Perl Documentation"
.SH "NAME"
Apache::TestRun \- Run the test suite
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`Apache::TestRun\*(C'\fR package controls the configuration and running
of the test suite.
.SH "METHODS"
.IX Header "METHODS"
Several methods are sub\-classable, if the default behavior should be
changed.
.ie n .Sh """bug_report"""
.el .Sh "\f(CWbug_report\fP"
.IX Subsection "bug_report"
The \f(CW\*(C`bug_report()\*(C'\fR method is executed when \f(CW\*(C`t/TEST\*(C'\fR was executed
with the \f(CW\*(C`\-bugreport\*(C'\fR option, and \f(CW\*(C`make test\*(C'\fR (or \f(CW\*(C`t/TEST\*(C'\fR)
fail. Normally this is callback which you can use to tell the user how
to deal with the problem, e.g. suggesting to read some document or
email some details to someone who can take care of it. By default
nothing is executed.
.PP
The \f(CW\*(C`\-bugreport\*(C'\fR option is needed so this feature won't become
annoying to developers themselves. It's automatically added to the
\&\f(CW\*(C`run_tests\*(C'\fR target in \fIMakefile\fR. So if you repeateadly have to test
your code, just don't use \f(CW\*(C`make test\*(C'\fR but run \f(CW\*(C`t/TEST\*(C'\fR
directly. Here is an example of a custom \f(CW\*(C`t/TEST\*(C'\fR
.PP
.Vb 1
\&  My::TestRun->new->run(@ARGV);
.Ve
.PP
.Vb 2
\&  package My::TestRun;
\&  use base 'Apache::TestRun';
.Ve
.PP
.Vb 2
\&  sub bug_report {
\&      my $self = shift;
.Ve
.PP
.Vb 6
\&      print <<EOI;
\&  +--------------------------------------------------------+
\&  | Please file a bug report: http://perl.apache.org/bugs/ |
\&  +--------------------------------------------------------+
\&  EOI
\&  }
.Ve
.ie n .Sh """pre_configure"""
.el .Sh "\f(CWpre_configure\fP"
.IX Subsection "pre_configure"
The \f(CW\*(C`pre_configure()\*(C'\fR method is executed before the configuration for
\&\f(CW\*(C`Apache::Test\*(C'\fR is generated. So if you need to adjust the setup
before \fIhttpd.conf\fR and other files are autogenerated, this is the
right place to do so.
.PP
For example if you don't want to inherit a LoadModule directive for
\&\fImod_apreq.so\fR but to make sure that the local version is used, you
can sub-class \f(CW\*(C`Apache::TestRun\*(C'\fR and override this method in
\&\fIt/TEST.PL\fR:
.PP
.Vb 4
\&  package My::TestRun;
\&  use base 'Apache::TestRun';
\&  use Apache::TestConfig;
\&  __PACKAGE__->new->run(@ARGV);
.Ve
.PP
.Vb 4
\&  sub pre_configure {
\&      my $self = shift;
\&      # Don't load an installed mod_apreq
\&      Apache::TestConfig::autoconfig_skip_module_add('mod_apreq.c');
.Ve
.PP
.Vb 2
\&      $self->SUPER::pre_configure();
\&  }
.Ve
.PP
Notice that the extension is \fI.c\fR, and not \fI.so\fR.
.PP
Don't forget to run the super class' c<\fIpre_configure()\fR> method.
.ie n .Sh """new_test_config"""
.el .Sh "\f(CWnew_test_config\fP"
.IX Subsection "new_test_config"
\&\s-1META:\s0 to be completed
.SH "Persistent Custom Configuration"
.IX Header "Persistent Custom Configuration"
When \f(CW\*(C`Apache::Test\*(C'\fR is first installed or used, it will save the
values of \f(CW\*(C`httpd\*(C'\fR, \f(CW\*(C`apxs\*(C'\fR, \f(CW\*(C`port\*(C'\fR, \f(CW\*(C`user\*(C'\fR, and \f(CW\*(C`group\*(C'\fR, if set,
to a configuration file \f(CW\*(C`Apache::TestConfigData\*(C'\fR.  This information
will then be used in setting these options for subsequent uses of
\&\f(CW\*(C`Apache\-Test\*(C'\fR unless temprorarily overridden, either by setting the
appropriate environment variable (\f(CW\*(C`APACHE_TEST_HTTPD\*(C'\fR,
\&\f(CW\*(C`APACHE_TEST_APXS\*(C'\fR, \f(CW\*(C`APACHE_TEST_PORT\*(C'\fR, \f(CW\*(C`APACHE_TEST_USER\*(C'\fR, and
\&\f(CW\*(C`APACHE_TEST_GROUP\*(C'\fR) or by giving the relevant option (\f(CW\*(C`\-httpd\*(C'\fR,
\&\f(CW\*(C`\-apxs\*(C'\fR, \f(CW\*(C`\-port\*(C'\fR, \f(CW\*(C`\-user\*(C'\fR, and \f(CW\*(C`\-group\*(C'\fR) when the \f(CW\*(C`TEST\*(C'\fR script
is run.
.PP
To avoid either using previous persistent configurations or saving
current configurations, set the \f(CW\*(C`APACHE_TEST_NO_STICKY_PREFERENCES\*(C'\fR
environment variable to a true value.
.PP
Finally it's possible to permanently override the previously saved
options by passing \f(CW\*(C`\-save\*(C'\fR.
.PP
Here is the algorithm of how and when options are saved for the first
time and when they are used. We will use a few variables to simplify
the pseudo\-code/pseudo\-chart flow:
.PP
\&\f(CW$config_exists\fR \- custom configuration has already been saved, to
get this setting run \f(CW\*(C`custom_config_exists()\*(C'\fR, which tests whether
either \f(CW\*(C`apxs\*(C'\fR or \f(CW\*(C`httpd\*(C'\fR values are set. It doesn't check for other
values, since all we need is \f(CW\*(C`apxs\*(C'\fR or \f(CW\*(C`httpd\*(C'\fR to get the test suite
running. \fIcustom_config_exists()\fR checks in the following order
\&\fIlib/Apache/TestConfigData.pm\fR (if during Apache-Test build) ,
\&\fI~/.apache\-test/Apache/TestConfigData.pm\fR and
\&\fIApache/TestConfigData.pm\fR in the perl's libraries.
.PP
\&\f(CW$config_overriden\fR \- that means that we have either \f(CW\*(C`apxs\*(C'\fR or
\&\f(CW\*(C`httpd\*(C'\fR values provided by user, via env vars or command line options.
.IP "1 Building Apache-Test or modperl\-2.0 (or any other project that bundles Apache\-Test)." 4
.IX Item "1 Building Apache-Test or modperl-2.0 (or any other project that bundles Apache-Test)."
.Vb 2
\&  1) perl Apache-Test/Makefile.PL
\&  (for bundles top-level Makefile.PL will run this as well)
.Ve
.Sp
.Vb 4
\&  if $config_exists
\&      do nothing
\&  else
\&      create lib/Apache/TestConfigData.pm w/ empty config: {}
.Ve
.Sp
.Vb 1
\&  2) make
.Ve
.Sp
.Vb 1
\&  3) make test
.Ve
.Sp
.Vb 13
\&  if $config_exists
\&      if $config_overriden
\&          override saved options (for those that were overriden)
\&      else
\&          use saved options
\&  else
\&      if $config_overriden
\&          save them in lib/Apache/TestConfigData.pm
\&          (which will be installed on 'make install')
\&      else
\&          - run interactive prompt for C<httpd> and optionally for C<apxs>
\&          - save the custom config in lib/Apache/TestConfigData.pm
\&          - restart the currently run program
.Ve
.Sp
.Vb 3
\&  modperl-2.0 is a special case in (3). it always overrides 'httpd'
\&  and 'apxs' settings. Other settings like 'port', can be used from
\&  the saved config.
.Ve
.Sp
.Vb 1
\&  4) make install
.Ve
.Sp
.Vb 4
\&     if $config_exists only in lib/Apache/TestConfigData.pm
\&        it will be installed system-wide
\&     else
\&        nothing changes (since lib/Apache/TestConfigData.pm won't exist)
.Ve
.IP "2 Testing 3rd party modules (after Apache-Test was installed)" 4
.IX Item "2 Testing 3rd party modules (after Apache-Test was installed)"
Notice that the following situation is quite possible:
.Sp
.Vb 2
\&  cd Apache-Test
\&  perl Makefile.PL && make install
.Ve
.Sp
so that Apache-Test was installed but no custom configuration saved
(since its \f(CW\*(C`make test\*(C'\fR wasn't run). In which case the interactive
configuration should kick in (unless config options were passed) and
in any case saved once configured.
.Sp
\&\f(CW$custom_config_path\fR \- perl's \fIApache/TestConfigData.pm\fR (at the
same location as \fIApache/TestConfig.pm\fR) if that area is writable by
that user (e.g. perl's lib is not owned by 'root'). If not, in
\&\fI~/.apache\-test/Apache/TestConfigData.pm\fR.
.Sp
.Vb 3
\&  1) perl Apache-Test/Makefile.PL
\&  2) make
\&  3) make test
.Ve
.Sp
.Vb 12
\&  if $config_exists
\&      if $config_overriden
\&          override saved options (for those that were overriden)
\&      else
\&          use saved options
\&  else
\&      if $config_overriden
\&          save them in $custom_config_path
\&      else
\&          - run interactive prompt for C<httpd> and optionally for C<apxs>
\&          - save the custom config in $custom_config_path
\&          - restart the currently run program
.Ve
.Sp
.Vb 1
\&  4) make install
.Ve
.Sh "Saving Custom Configuration Options"
.IX Subsection "Saving Custom Configuration Options"
If you want to override the existing custom configurations options to
\&\f(CW\*(C`Apache::TestConfigData\*(C'\fR, use the \f(CW\*(C`\-save\*(C'\fR flag when running \f(CW\*(C`TEST\*(C'\fR.
.PP
If you are running \f(CW\*(C`Apache::Test\*(C'\fR as a user who does not have
permission to alter the system \f(CW\*(C`Apache::TestConfigData\*(C'\fR, you can
place your own private configuration file \fITestConfigData.pm\fR under
\&\f(CW\*(C`$ENV{HOME}/.apache\-test/Apache/\*(C'\fR, which \f(CW\*(C`Apache::Test\*(C'\fR will use, if
present. An example of such a configuration file is
.PP
.Vb 5
\&  # file $ENV{HOME}/.apache-test/Apache/TestConfigData.pm
\&  package Apache::TestConfigData;
\&  use strict;
\&  use warnings;
\&  use vars qw($vars);
.Ve
.PP
.Vb 5
\&  $vars = {
\&      'group' => 'me',
\&      'user' => 'myself',
\&      'port' => '8529',
\&      'httpd' => '/usr/local/apache/bin/httpd',
.Ve
.PP
.Vb 2
\&  };
\&  1;
.Ve
