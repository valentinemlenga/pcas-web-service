.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "File::ShareDir 3"
.TH File::ShareDir 3 "2010-03-17" "perl v5.8.4" "User Contributed Perl Documentation"
.SH "NAME"
File::ShareDir \- Locate per\-dist and per\-module shared files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use File::ShareDir ':ALL';
.Ve
.PP
.Vb 2
\&  # Where are distribution-level shared data files kept
\&  $dir = dist_dir('File-ShareDir');
.Ve
.PP
.Vb 2
\&  # Where are module-level shared data files kept
\&  $dir = module_dir('File::ShareDir');
.Ve
.PP
.Vb 3
\&  # Find a specific file in our dist/module shared dir
\&  $file = dist_file(  'File-ShareDir',  'file/name.txt');
\&  $file = module_file('File::ShareDir', 'file/name.txt');
.Ve
.PP
.Vb 2
\&  # Like module_file, but search up the inheritance tree
\&  $file = class_file( 'Foo::Bar', 'file/name.txt' );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The intent of File::ShareDir is to provide a companion to
Class::Inspector and File::HomeDir, modules that take a
process that is well-known by advanced Perl developers but gets a
little tricky, and make it more available to the larger Perl community.
.PP
Quite often you want or need your Perl module (\s-1CPAN\s0 or otherwise)
to have access to a large amount of read-only data that is stored
on the file-system at run\-time.
.PP
On a linux-like system, this would be in a place such as /usr/share,
however Perl runs on a wide variety of different systems, and so
the use of any one location is unreliable.
.PP
Perl provides a little-known method for doing this, but almost
nobody is aware that it exists. As a result, module authors often
go through some very strange ways to make the data available to
their code.
.PP
The most common of these is to dump the data out to an enormous
Perl data structure and save it into the module itself. The
result are enormous multi-megabyte .pm files that chew up a
lot of memory needlessly.
.PP
Another method is to put the data \*(L"file\*(R" after the _\|_DATA_\|_ compiler
tag and limit yourself to access as a filehandle.
.PP
The problem to solve is really quite simple.
.PP
.Vb 1
\&  1. Write the data files to the system at install time.
.Ve
.PP
.Vb 1
\&  2. Know where you put them at run-time.
.Ve
.PP
Perl's install system creates an \*(L"auto\*(R" directory for both
every distribution and for every module file.
.PP
These are used by a couple of different auto-loading systems
to store code fragments generated at install time, and various
other modules written by the Perl \*(L"ancient masters\*(R".
.PP
But the same mechanism is available to any dist or module to
store any sort of data.
.Sh "Using Data in your Module"
.IX Subsection "Using Data in your Module"
\&\f(CW\*(C`File::ShareDir\*(C'\fR forms one half of a two part solution.
.PP
Once the files have been installed to the correct directory,
you can use \f(CW\*(C`File::ShareDir\*(C'\fR to find your files again after
the installation.
.PP
For the installation half of the solution, see Module::Install
and its \f(CW\*(C`install_share\*(C'\fR directive.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
\&\f(CW\*(C`File::ShareDir\*(C'\fR provides four functions for locating files and
directories.
.PP
For greater maintainability, none of these are exported by default
and you are expected to name the ones you want at use\-time, or provide
the \f(CW':ALL'\fR tag. All of the following are equivalent.
.PP
.Vb 3
\&  # Load but don't import, and then call directly
\&  use File::ShareDir;
\&  $dir = File::ShareDir::dist_dir('My-Dist');
.Ve
.PP
.Vb 3
\&  # Import a single function
\&  use File::ShareDir 'dist_dir';
\&  dist_dir('My-Dist');
.Ve
.PP
.Vb 3
\&  # Import all the functions
\&  use File::ShareDir ':ALL';
\&  dist_dir('My-Dist');
.Ve
.PP
All of the functions will check for you that the dir/file actually
exists, and that you have read permissions, or they will throw an
exception.
.Sh "dist_dir"
.IX Subsection "dist_dir"
.Vb 2
\&  # Get a distribution's shared files directory
\&  my $dir = dist_dir('My-Distribution');
.Ve
.PP
The \f(CW\*(C`dist_dir\*(C'\fR function takes a single parameter of the name of an
installed (\s-1CPAN\s0 or otherwise) distribution, and locates the shared
data directory created at install time for it.
.PP
Returns the directory path as a string, or dies if it cannot be
located or is not readable.
.Sh "module_dir"
.IX Subsection "module_dir"
.Vb 2
\&  # Get a module's shared files directory
\&  my $dir = module_dir('My::Module');
.Ve
.PP
The \f(CW\*(C`module_dir\*(C'\fR function takes a single parameter of the name of an
installed (\s-1CPAN\s0 or otherwise) module, and locates the shared data
directory created at install time for it.
.PP
In order to find the directory, the module \fBmust\fR be loaded when
calling this function.
.PP
Returns the directory path as a string, or dies if it cannot be
located or is not readable.
.Sh "dist_file"
.IX Subsection "dist_file"
.Vb 2
\&  # Find a file in our distribution shared dir
\&  my $dir = dist_file('My-Distribution', 'file/name.txt');
.Ve
.PP
The \f(CW\*(C`dist_file\*(C'\fR function takes two params of the distribution name
and file name, locates the dist dir, and then finds the file within
it, verifying that the file actually exists, and that it is readable.
.PP
The filename should be a relative path in the format of your local
filesystem. It will simply added to the directory using File::Spec's
\&\f(CW\*(C`catfile\*(C'\fR method.
.PP
Returns the file path as a string, or dies if the file or the dist's
directory cannot be located, or the file is not readable.
.Sh "module_file"
.IX Subsection "module_file"
.Vb 2
\&  # Find a file in our module shared dir
\&  my $dir = module_file('My::Module', 'file/name.txt');
.Ve
.PP
The \f(CW\*(C`module_file\*(C'\fR function takes two params of the module name
and file name. It locates the module dir, and then finds the file within
it, verifying that the file actually exists, and that it is readable.
.PP
In order to find the directory, the module \fBmust\fR be loaded when
calling this function.
.PP
The filename should be a relative path in the format of your local
filesystem. It will simply added to the directory using File::Spec's
\&\f(CW\*(C`catfile\*(C'\fR method.
.PP
Returns the file path as a string, or dies if the file or the dist's
directory cannot be located, or the file is not readable.
.Sh "class_file"
.IX Subsection "class_file"
.Vb 2
\&  # Find a file in our module shared dir, or in our parent class
\&  my $dir = class_file('My::Module', 'file/name.txt');
.Ve
.PP
The \f(CW\*(C`module_file\*(C'\fR function takes two params of the module name
and file name. It locates the module dir, and then finds the file within
it, verifying that the file actually exists, and that it is readable.
.PP
In order to find the directory, the module \fBmust\fR be loaded when
calling this function.
.PP
The filename should be a relative path in the format of your local
filesystem. It will simply added to the directory using File::Spec's
\&\f(CW\*(C`catfile\*(C'\fR method.
.PP
If the file is \s-1NOT\s0 found for that module, \f(CW\*(C`class_file\*(C'\fR will scan up
the module's \f(CW@ISA\fR tree, looking for the file in all of the parent
classes.
.PP
This allows you to, in effect, \*(L"subclass\*(R" shared files.
.PP
Returns the file path as a string, or dies if the file or the dist's
directory cannot be located, or the file is not readable.
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs should always be submitted via the \s-1CPAN\s0 bug tracker
.PP
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=File\-ShareDir>
.PP
For other issues, contact the maintainer.
.SH "AUTHOR"
.IX Header "AUTHOR"
Adam Kennedy <adamk@cpan.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
File::HomeDir, Module::Install, Module::Install::Share,
File::ShareDir::PAR
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2005 \- 2010 Adam Kennedy.
.PP
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
