.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CGI::Simple::Standard 3"
.TH CGI::Simple::Standard 3 "2011-01-13" "perl v5.8.4" "User Contributed Perl Documentation"
.SH "NAME"
CGI::Simple::Standard \- a wrapper module for CGI::Simple that provides a
function style interface
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    use CGI::Simple::Standard qw( -autoload );
\&    use CGI::Simple::Standard qw( :core :cookie :header :misc );
\&    use CGI::Simple::Standard qw( param upload );
.Ve
.PP
.Vb 2
\&    $CGI::Simple::Standard::POST_MAX = 1024;       # max upload via post 1kB
\&    $CGI::Simple::Standard::DISABLE_UPLOADS = 0;   # enable uploads
.Ve
.PP
.Vb 3
\&    @params = param();        # return all param names as a list
\&    $value =  param('foo');   # return the first value supplied for 'foo'
\&    @values = param('foo');   # return all values supplied for foo
.Ve
.PP
.Vb 3
\&    %fields   = Vars();       # returns untied key value pair hash
\&    $hash_ref = Vars();       # or as a hash ref
\&    %fields   = Vars("|");    # packs multiple values with "|" rather than "\e0";
.Ve
.PP
.Vb 1
\&    @keywords = keywords();   # return all keywords as a list
.Ve
.PP
.Vb 3
\&    param( 'foo', 'some', 'new', 'values' );        # set new 'foo' values
\&    param( -name=>'foo', -value=>'bar' );
\&    param( -name=>'foo', -value=>['bar','baz'] );
.Ve
.PP
.Vb 2
\&    append( -name=>'foo', -value=>'bar' );          # append values to 'foo'
\&    append( -name=>'foo', -value=>['some', 'new', 'values'] );
.Ve
.PP
.Vb 2
\&    Delete('foo');   # delete param 'foo' and all its values
\&    Delete_all();    # delete everything
.Ve
.PP
.Vb 1
\&    <INPUT TYPE="file" NAME="upload_file" SIZE="42">
.Ve
.PP
.Vb 5
\&    $files    = upload()                   # number of files uploaded
\&    @files    = upload();                  # names of all uploaded files
\&    $filename = param('upload_file')       # filename of 'upload_file' field
\&    $mime     = upload_info($filename,'mime'); # MIME type of uploaded file
\&    $size     = upload_info($filename,'size'); # size of uploaded file
.Ve
.PP
.Vb 2
\&    my $fh = $q->upload($filename);     # open filehandle to read from
\&    while ( read( $fh, $buffer, 1024 ) ) { ... }
.Ve
.PP
.Vb 3
\&    # short and sweet upload
\&    $ok = upload( param('upload_file'), '/path/to/write/file.name' );
\&    print "Uploaded ".param('upload_file')." and wrote it OK!" if $ok;
.Ve
.PP
.Vb 4
\&    $decoded    = url_decode($encoded);
\&    $encoded    = url_encode($unencoded);
\&    $escaped    = escapeHTML('<>"&');
\&    $unescaped  = unescapeHTML('&lt;&gt;&quot;&amp;');
.Ve
.PP
.Vb 1
\&    $qs = query_string();   # get all data in $q as a query string OK for GET
.Ve
.PP
.Vb 11
\&    no_cache(1);            # set Pragma: no-cache + expires
\&    print header();         # print a simple header
\&    # get a complex header
\&    $header = header(   -type       => 'image/gif'
\&                        -nph        => 1,
\&                        -status     => '402 Payment required',
\&                        -expires    =>'+24h',
\&                        -cookie     => $cookie,
\&                        -charset    => 'utf-7',
\&                        -attachment => 'foo.gif',
\&                        -Cost       => '$2.00');
.Ve
.PP
.Vb 11
\&    @cookies = cookie();        # get names of all available cookies
\&    $value   = cookie('foo')    # get first value of cookie 'foo'
\&    @value   = cookie('foo')    # get all values of cookie 'foo'
\&    # get a cookie formatted for header() method
\&    $cookie  = cookie(  -name    => 'Password',
\&                        -values  => ['superuser','god','my dog woofie'],
\&                        -expires => '+3d',
\&                        -domain  => '.nowhere.com',
\&                        -path    => '/cgi-bin/database',
\&                        -secure  => 1 );
\&    print header( -cookie=>$cookie );       # set cookie
.Ve
.PP
.Vb 1
\&    print redirect('http://go.away.now');   # print a redirect header
.Ve
.PP
.Vb 1
\&    dienice( cgi_error() ) if cgi_error();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is a wrapper for the completely object oriented CGI::Simple
module and provides a simple functional style interface. It provides two
different methods to import function names into your namespace.
.Sh "Autoloading"
.IX Subsection "Autoloading"
If you specify the '\-autoload' pragma like this:
.PP
.Vb 1
\&    use CGI::Simple::Standard qw( -autoload );
.Ve
.PP
Then it will use \s-1AUTOLOAD\s0 and a symbol table trick to export only those subs
you actually call into your namespace. When you specify the '\-autoload' pragma
this module exports a single \s-1AUTOLOAD\s0 subroutine into you namespace. This will
clash with any \s-1AUTOLOAD\s0 sub that exists in the calling namespace so if you are
using \s-1AUTOLOAD\s0 for something else don't use this pragma.
.PP
Anyway, when you call a subroutine that is not defined in your script this
\&\s-1AUTOLOAD\s0 sub will be called. The first time this happens it
will initialize a CGI::Simple object and then apply the requested method
(if it exists) to it. A fatal exception will be thrown if you try to use an
undefined method (function).
.Sh "Specified Export"
.IX Subsection "Specified Export"
Alternatively you can specify the functions you wish to import. You can do
this on a per function basis like this:
.PP
.Vb 1
\&    use CGI::Simple::Standard qw( param upload query_string Dump );
.Ve
.PP
or utilize the \f(CW%EXPORT_TAGS\fR that group functions into related groups.
Here are the groupings:
.PP
.Vb 31
\&  %EXPORT_TAGS = (
\&    ':html'     => [ qw(:misc) ],
\&    ':standard' => [ qw(:core :access) ],
\&    ':cgi'      => [ qw(:core :access) ],
\&    ':all'      => [ qw(:core :misc :cookie :header :push :debug :cgi-lib
\&                        :access :internal) ],
\&    ':core'     => [ qw(param add_param param_fetch url_param keywords
\&                        append Delete delete_all Delete_all upload
\&                        query_string parse_query_string  parse_keywordlist
\&                        Vars save_parameters restore_parameters) ],
\&    ':misc'     => [ qw(url_decode url_encode escapeHTML unescapeHTML put) ],
\&    ':cookie'   => [ qw(cookie raw_cookie) ],
\&    ':header'   => [ qw(header cache no_cache redirect) ],
\&    ':push'     => [ qw(multipart_init multipart_start multipart_end
\&                        multipart_final) ],
\&    ':debug'    => [ qw(Dump as_string cgi_error _cgi_object) ],
\&    ':cgi-lib'  => [ qw(ReadParse SplitParam MethGet MethPost MyBaseUrl MyURL
\&                        MyFullUrl PrintHeader HtmlTop HtmlBot PrintVariables
\&                        PrintEnv CgiDie CgiError Vars) ],
\&    ':ssl'      => [ qw(https) ],
\&    ':access'   => [ qw(version nph all_parameters charset crlf globals
\&                        auth_type content_length content_type document_root
\&                        gateway_interface path_translated referer remote_addr
\&                        remote_host remote_ident remote_user request_method
\&                        script_name server_name server_port server_protocol
\&                        server_software user_name user_agent virtual_host
\&                        path_info Accept http https protocol url self_url
\&                        state) ],
\&    ':internal' => [ qw(_initialize_globals _use_cgi_pm_global_settings
\&                        _store_globals _reset_globals) ]
\&    );
.Ve
.PP
The familiar \s-1CGI\s0.pm tags are available but do not include the \s-1HTML\s0
functionality. You specify the import of some function groups like this:
.PP
use CGI::Simple::Standard qw( :core :cookie :header );
.PP
Note that the function groups all start with a : char.
.Sh "Mix and Match"
.IX Subsection "Mix and Match"
You can use the '\-autoload' pragma, specifically named function imports and
tag group imports together if you desire.
.ie n .SH "$POST_MAX and $DISABLE_UPLOADS"
.el .SH "$POST_MAX and \f(CW$DISABLE_UPLOADS\fP"
.IX Header "$POST_MAX and $DISABLE_UPLOADS"
If you wish to set \f(CW$POST_MAX\fR or \f(CW$DISABLE_UPLOADS\fR you must do this *after* the
use statement and *before* the first function call as shown in the synopsis.
.PP
Unlike \s-1CGI\s0.pm uploads are disabled by default and the maximum acceptable
data via post is capped at 102_400kB rather than infinity. This is specifically
to avoid denial of service attacks by default. To enable uploads and to
allow them to be of infinite size you simply:
.PP
.Vb 2
\&    $CGI::Simple::Standard::POST_MAX = -1;         # infinite size upload
\&    $CGI::Simple::Standard::$DISABLE_UPLOADS = 0;  # enable uploads
.Ve
.PP
Alternatively you can specify the \s-1CGI\s0.pm default values as shown above by
specifying the '\-default' pragma in your use statement.
.PP
.Vb 1
\&    use CGI::Simple::Standard qw( -default ..... );
.Ve
.SH "EXPORT"
.IX Header "EXPORT"
Nothing by default.
.PP
Under the '\-autoload' pragma the \s-1AUTOLOAD\s0 subroutine is
exported into the calling namespace. Additional subroutines are only imported
into this namespace if you physically call them. They are installed in the
symbol table the first time you use them to save repeated calls to \s-1AUTOLOAD\s0.
.PP
If you specifically request a function or group of functions via an \s-1EXPORT_TAG\s0
then stubs of these functions are exported into the calling namespace. These
stub functions will be replaced with the real functions only if you actually
call them saving wasted compilation effort.
.SH "FUNCTION DETAILS"
.IX Header "FUNCTION DETAILS"
This is a wrapper module for CGI::Simple. Virtually all the methods available
in the \s-1OO\s0 interface are available via the functional interface. Several
method names are aliased to prevent namespace conflicts:
.PP
.Vb 4
\&    $q->delete('foo')   =>  Delete('foo')
\&    $q->delete_all      =>  Delete_all() or delete_all()
\&    $q->save(\e*FH)      =>  save_parameters(\e*FH)
\&    $q->accept()        =>  Accept()
.Ve
.PP
Although you could use the \fInew()\fR function to genrate new \s-1OO\s0 CGI::Simple
objects the \fIrestore_parameters()\fR function is a better choice as it operates
like new but on the correct underlying CGI::Simple object for the functional
interface.
.PP
\&\fIrestore_parameters()\fR can be used exactly as you might use \fInew()\fR in that
you can supply arguments to it such as query strings, hashes and file handles
to re-initialize your underlying object.
.PP
.Vb 4
\&    $q->new CGI::Simple()                => restore_parameters()
\&    $q->new CGI::Simple({foo=>'bar'})    => restore_parameters({foo=>'bar'})
\&    $q->new CGI::Simple($query_string)   => restore_parameters($query_string)
\&    $q->new CGI::Simple(\e*FH)            => restore_parameters(\e*FH)
.Ve
.PP
For full details of the available functions see the CGI::Simple docs. Just
remove the \f(CW$q\fR\-> part and use the method name directly.
.SH "BUGS"
.IX Header "BUGS"
As this is 0.01 there are almost bound to be some.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dr James Freeman <jfreeman@tassie.net.au>
This release by Andy Armstrong <andy@hexten.net>
.PP
This package is free software and is provided \*(L"as is\*(R" without express or
implied warranty. It may be used, redistributed and/or modified under the terms
of the Perl Artistic License (see http://www.perl.com/perl/misc/Artistic.html)
.PP
Address bug reports and comments to: andy@hexten.net
.SH "CREDITS"
.IX Header "CREDITS"
The interface and key sections of the CGI::Simple code come from
\&\s-1CGI\s0.pm by Lincoln Stein.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
CGI::Simple which is the back end for this module,
\&\fB\s-1CGI\s0.pm by Lincoln Stein\fR
