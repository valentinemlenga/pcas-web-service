.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Catalyst::Response 3"
.TH Catalyst::Response 3 "2011-01-03" "perl v5.8.4" "User Contributed Perl Documentation"
.SH "NAME"
Catalyst::Response \- stores output responding to the current client request
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 13
\&    $res = $c->response;
\&    $res->body;
\&    $res->code;
\&    $res->content_encoding;
\&    $res->content_length;
\&    $res->content_type;
\&    $res->cookies;
\&    $res->header;
\&    $res->headers;
\&    $res->output;
\&    $res->redirect;
\&    $res->status;
\&    $res->write;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the Catalyst Response class, which provides methods for responding to
the current client request. The appropriate Catalyst::Engine for your environment
will turn the Catalyst::Response into a \s-1HTTP\s0 Response and return it to the client.
.SH "METHODS"
.IX Header "METHODS"
.ie n .Sh "$res\->body( $text\fP | \f(CW$fh\fP | \f(CW$iohandle_object )"
.el .Sh "$res\->body( \f(CW$text\fP | \f(CW$fh\fP | \f(CW$iohandle_object\fP )"
.IX Subsection "$res->body( $text | $fh | $iohandle_object )"
.Vb 1
\&    $c->response->body('Catalyst rocks!');
.Ve
.PP
Sets or returns the output (text or binary data). If you are returning a large body,
you might want to use a IO::Handle type of object (Something that implements the read method
in the same fashion), or a filehandle \s-1GLOB\s0. Catalyst
will write it piece by piece into the response.
.Sh "$res\->has_body"
.IX Subsection "$res->has_body"
Predicate which returns true when a body has been set.
.Sh "$res\->code"
.IX Subsection "$res->code"
Alias for \f(CW$res\fR\->status.
.Sh "$res\->content_encoding"
.IX Subsection "$res->content_encoding"
Shortcut for \f(CW$res\fR\->headers\->content_encoding.
.Sh "$res\->content_length"
.IX Subsection "$res->content_length"
Shortcut for \f(CW$res\fR\->headers\->content_length.
.Sh "$res\->content_type"
.IX Subsection "$res->content_type"
Shortcut for \f(CW$res\fR\->headers\->content_type.
.PP
This value is typically set by your view or plugin. For example,
Catalyst::Plugin::Static::Simple will guess the mime type based on the file
it found, while Catalyst::View::TT defaults to \f(CW\*(C`text/html\*(C'\fR.
.Sh "$res\->cookies"
.IX Subsection "$res->cookies"
Returns a reference to a hash containing cookies to be set. The keys of the
hash are the cookies' names, and their corresponding values are hash
references used to construct a CGI::Simple::Cookie object.
.PP
.Vb 1
\&    $c->response->cookies->{foo} = { value => '123' };
.Ve
.PP
The keys of the hash reference on the right correspond to the CGI::Simple::Cookie
parameters of the same name, except they are used without a leading dash.
Possible parameters are:
.IP "value" 4
.IX Item "value"
.PD 0
.IP "expires" 4
.IX Item "expires"
.IP "domain" 4
.IX Item "domain"
.IP "path" 4
.IX Item "path"
.IP "secure" 4
.IX Item "secure"
.IP "httponly" 4
.IX Item "httponly"
.PD
.Sh "$res\->header"
.IX Subsection "$res->header"
Shortcut for \f(CW$res\fR\->headers\->header.
.Sh "$res\->headers"
.IX Subsection "$res->headers"
Returns an HTTP::Headers object, which can be used to set headers.
.PP
.Vb 1
\&    $c->response->headers->header( 'X-Catalyst' => $Catalyst::VERSION );
.Ve
.Sh "$res\->output"
.IX Subsection "$res->output"
Alias for \f(CW$res\fR\->body.
.ie n .Sh "$res\->redirect( $url\fP, \f(CW$status )"
.el .Sh "$res\->redirect( \f(CW$url\fP, \f(CW$status\fP )"
.IX Subsection "$res->redirect( $url, $status )"
Causes the response to redirect to the specified \s-1URL\s0. The default status is
\&\f(CW302\fR.
.PP
.Vb 2
\&    $c->response->redirect( 'http://slashdot.org' );
\&    $c->response->redirect( 'http://slashdot.org', 307 );
.Ve
.PP
This is a convenience method that sets the Location header to the
redirect destination, and then sets the response status.  You will
want to \f(CW\*(C` return \*(C'\fR or \f(CW\*(C`$c\->detach()\*(C'\fR to interrupt the normal
processing flow if you want the redirect to occur straight away.
.Sh "$res\->location"
.IX Subsection "$res->location"
Sets or returns the \s-1HTTP\s0 'Location'.
.Sh "$res\->status"
.IX Subsection "$res->status"
Sets or returns the \s-1HTTP\s0 status.
.PP
.Vb 1
\&    $c->response->status(404);
.Ve
.PP
$res\->code is an alias for this, to match HTTP::Response\->code.
.ie n .Sh "$res\->write( $data )"
.el .Sh "$res\->write( \f(CW$data\fP )"
.IX Subsection "$res->write( $data )"
Writes \f(CW$data\fR to the output stream.
.Sh "meta"
.IX Subsection "meta"
Provided by Moose
.ie n .Sh "$res\->print( @data )"
.el .Sh "$res\->print( \f(CW@data\fP )"
.IX Subsection "$res->print( @data )"
Prints \f(CW@data\fR to the output stream, separated by $,.  This lets you pass
the response object to functions that want to write to an IO::Handle.
.SH "AUTHORS"
.IX Header "AUTHORS"
Catalyst Contributors, see Catalyst.pm
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This library is free software. You can redistribute it and/or modify
it under the same terms as Perl itself.
