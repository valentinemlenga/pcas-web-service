.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TAP::Harness 3"
.TH TAP::Harness 3 "2010-08-14" "perl v5.8.4" "User Contributed Perl Documentation"
.SH "NAME"
TAP::Harness \- Run test scripts with statistics
.SH "VERSION"
.IX Header "VERSION"
Version 3.22
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a simple test harness which allows tests to be run and results
automatically aggregated and output to \s-1STDOUT\s0.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& use TAP::Harness;
\& my $harness = TAP::Harness->new( \e%args );
\& $harness->runtests(@tests);
.Ve
.SH "METHODS"
.IX Header "METHODS"
.Sh "Class Methods"
.IX Subsection "Class Methods"
\fI\f(CI\*(C`new\*(C'\fI\fR
.IX Subsection "new"
.PP
.Vb 5
\& my %args = (
\&    verbosity => 1,
\&    lib     => [ 'lib', 'blib/lib', 'blib/arch' ],
\& )
\& my $harness = TAP::Harness->new( \e%args );
.Ve
.PP
The constructor returns a new \f(CW\*(C`TAP::Harness\*(C'\fR object. It accepts an
optional hashref whose allowed keys are:
.ie n .IP "* ""verbosity""" 4
.el .IP "* \f(CWverbosity\fR" 4
.IX Item "verbosity"
Set the verbosity level:
.Sp
.Vb 6
\&     1   verbose        Print individual test results to STDOUT.
\&     0   normal
\&    -1   quiet          Suppress some test output (mostly failures 
\&                        while tests are running).
\&    -2   really quiet   Suppress everything but the tests summary.
\&    -3   silent         Suppress everything.
.Ve
.ie n .IP "* ""timer""" 4
.el .IP "* \f(CWtimer\fR" 4
.IX Item "timer"
Append run time for each test to output. Uses Time::HiRes if
available.
.ie n .IP "* ""failures""" 4
.el .IP "* \f(CWfailures\fR" 4
.IX Item "failures"
Show test failures (this is a no-op if \f(CW\*(C`verbose\*(C'\fR is selected).
.ie n .IP "* ""comments""" 4
.el .IP "* \f(CWcomments\fR" 4
.IX Item "comments"
Show test comments (this is a no-op if \f(CW\*(C`verbose\*(C'\fR is selected).
.ie n .IP "* ""show_count""" 4
.el .IP "* \f(CWshow_count\fR" 4
.IX Item "show_count"
Update the running test count during testing.
.ie n .IP "* ""normalize""" 4
.el .IP "* \f(CWnormalize\fR" 4
.IX Item "normalize"
Set to a true value to normalize the \s-1TAP\s0 that is emitted in verbose modes.
.ie n .IP "* ""lib""" 4
.el .IP "* \f(CWlib\fR" 4
.IX Item "lib"
Accepts a scalar value or array ref of scalar values indicating which
paths to allowed libraries should be included if Perl tests are
executed. Naturally, this only makes sense in the context of tests
written in Perl.
.ie n .IP "* ""switches""" 4
.el .IP "* \f(CWswitches\fR" 4
.IX Item "switches"
Accepts a scalar value or array ref of scalar values indicating which
switches should be included if Perl tests are executed. Naturally, this
only makes sense in the context of tests written in Perl.
.ie n .IP "* ""test_args""" 4
.el .IP "* \f(CWtest_args\fR" 4
.IX Item "test_args"
A reference to an \f(CW@INC\fR style array of arguments to be passed to each
test program.
.Sp
.Vb 1
\&  test_args => ['foo', 'bar'],
.Ve
.Sp
if you want to pass different arguments to each test then you should
pass a hash of arrays, keyed by the alias for each test:
.Sp
.Vb 4
\&  test_args => {
\&    my_test    => ['foo', 'bar'],
\&    other_test => ['baz'],
\&  }
.Ve
.ie n .IP "* ""color""" 4
.el .IP "* \f(CWcolor\fR" 4
.IX Item "color"
Attempt to produce color output.
.ie n .IP "* ""exec""" 4
.el .IP "* \f(CWexec\fR" 4
.IX Item "exec"
Typically, Perl tests are run through this. However, anything which
spits out \s-1TAP\s0 is fine. You can use this argument to specify the name of
the program (and optional switches) to run your tests with:
.Sp
.Vb 1
\&  exec => ['/usr/bin/ruby', '-w']
.Ve
.Sp
You can also pass a subroutine reference in order to determine and
return the proper program to run based on a given test script. The
subroutine reference should expect the TAP::Harness object itself as the
first argument, and the file name as the second argument. It should
return an array reference containing the command to be run and including
the test file name. It can also simply return \f(CW\*(C`undef\*(C'\fR, in which case
TAP::Harness will fall back on executing the test script in Perl:
.Sp
.Vb 2
\&    exec => sub {
\&        my ( $harness, $test_file ) = @_;
.Ve
.Sp
.Vb 5
\&        # Let Perl tests run.
\&        return undef if $test_file =~ /[.]t$/;
\&        return [ qw( /usr/bin/ruby -w ), $test_file ]
\&          if $test_file =~ /[.]rb$/;
\&      }
.Ve
.Sp
If the subroutine returns a scalar with a newline or a filehandle, it
will be interpreted as raw \s-1TAP\s0 or as a \s-1TAP\s0 stream, respectively.
.ie n .IP "* ""merge""" 4
.el .IP "* \f(CWmerge\fR" 4
.IX Item "merge"
If \f(CW\*(C`merge\*(C'\fR is true the harness will create parsers that merge \s-1STDOUT\s0
and \s-1STDERR\s0 together for any processes they start.
.ie n .IP "* ""sources""" 4
.el .IP "* \f(CWsources\fR" 4
.IX Item "sources"
\&\fI\s-1NEW\s0 to 3.18\fR.
.Sp
If set, \f(CW\*(C`sources\*(C'\fR must be a hashref containing the names of the
TAP::Parser::SourceHandlers to load and/or configure.  The values are a
hash of configuration that will be accessible to to the source handlers via
\&\*(L"config_for\*(R" in TAP::Parser::Source.
.Sp
For example:
.Sp
.Vb 5
\&  sources => {
\&    Perl => { exec => '/path/to/custom/perl' },
\&    File => { extensions => [ '.tap', '.txt' ] },
\&    MyCustom => { some => 'config' },
\&  }
.Ve
.Sp
The \f(CW\*(C`sources\*(C'\fR parameter affects how \f(CW\*(C`source\*(C'\fR, \f(CW\*(C`tap\*(C'\fR and \f(CW\*(C`exec\*(C'\fR parameters
are handled.
.Sp
For more details, see the \f(CW\*(C`sources\*(C'\fR parameter in \*(L"new\*(R" in TAP::Parser,
TAP::Parser::Source, and TAP::Parser::IteratorFactory.
.ie n .IP "* ""aggregator_class""" 4
.el .IP "* \f(CWaggregator_class\fR" 4
.IX Item "aggregator_class"
The name of the class to use to aggregate test results. The default is
TAP::Parser::Aggregator.
.ie n .IP "* ""version""" 4
.el .IP "* \f(CWversion\fR" 4
.IX Item "version"
\&\fI\s-1NEW\s0 to 3.22\fR.
.Sp
Assume this \s-1TAP\s0 version for TAP::Parser instead of default \s-1TAP\s0
version 12.
.ie n .IP "* ""formatter_class""" 4
.el .IP "* \f(CWformatter_class\fR" 4
.IX Item "formatter_class"
The name of the class to use to format output. The default is
TAP::Formatter::Console, or TAP::Formatter::File if the output
isn't a \s-1TTY\s0.
.ie n .IP "* ""multiplexer_class""" 4
.el .IP "* \f(CWmultiplexer_class\fR" 4
.IX Item "multiplexer_class"
The name of the class to use to multiplex tests during parallel testing.
The default is TAP::Parser::Multiplexer.
.ie n .IP "* ""parser_class""" 4
.el .IP "* \f(CWparser_class\fR" 4
.IX Item "parser_class"
The name of the class to use to parse \s-1TAP\s0. The default is
TAP::Parser.
.ie n .IP "* ""scheduler_class""" 4
.el .IP "* \f(CWscheduler_class\fR" 4
.IX Item "scheduler_class"
The name of the class to use to schedule test execution. The default is
TAP::Parser::Scheduler.
.ie n .IP "* ""formatter""" 4
.el .IP "* \f(CWformatter\fR" 4
.IX Item "formatter"
If set \f(CW\*(C`formatter\*(C'\fR must be an object that is capable of formatting the
\&\s-1TAP\s0 output. See TAP::Formatter::Console for an example.
.ie n .IP "* ""errors""" 4
.el .IP "* \f(CWerrors\fR" 4
.IX Item "errors"
If parse errors are found in the \s-1TAP\s0 output, a note of this will be
made in the summary report. To see all of the parse errors, set this
argument to true:
.Sp
.Vb 1
\&  errors => 1
.Ve
.ie n .IP "* ""directives""" 4
.el .IP "* \f(CWdirectives\fR" 4
.IX Item "directives"
If set to a true value, only test results with directives will be
displayed. This overrides other settings such as \f(CW\*(C`verbose\*(C'\fR or
\&\f(CW\*(C`failures\*(C'\fR.
.ie n .IP "* ""ignore_exit""" 4
.el .IP "* \f(CWignore_exit\fR" 4
.IX Item "ignore_exit"
If set to a true value instruct \f(CW\*(C`TAP::Parser\*(C'\fR to ignore exit and wait
status from test scripts.
.ie n .IP "* ""jobs""" 4
.el .IP "* \f(CWjobs\fR" 4
.IX Item "jobs"
The maximum number of parallel tests to run at any time.  Which tests
can be run in parallel is controlled by \f(CW\*(C`rules\*(C'\fR.  The default is to
run only one test at a time.
.ie n .IP "* ""rules""" 4
.el .IP "* \f(CWrules\fR" 4
.IX Item "rules"
A reference to a hash of rules that control which tests may be
executed in parallel. This is an experimental feature and the
interface may change.
.Sp
.Vb 10
\&    $harness->rules(
\&        {   par => [
\&                { seq => '../ext/DB_File/t/*' },
\&                { seq => '../ext/IO_Compress_Zlib/t/*' },
\&                { seq => '../lib/CPANPLUS/*' },
\&                { seq => '../lib/ExtUtils/t/*' },
\&                '*'
\&            ]
\&        }
\&    );
.Ve
.ie n .IP "* ""stdout""" 4
.el .IP "* \f(CWstdout\fR" 4
.IX Item "stdout"
A filehandle for catching standard output.
.ie n .IP "* ""trap""" 4
.el .IP "* \f(CWtrap\fR" 4
.IX Item "trap"
Attempt to print summary information if run is interrupted by
\&\s-1SIGINT\s0 (Ctrl\-C).
.PP
Any keys for which the value is \f(CW\*(C`undef\*(C'\fR will be ignored.
.Sh "Instance Methods"
.IX Subsection "Instance Methods"
\fI\f(CI\*(C`runtests\*(C'\fI\fR
.IX Subsection "runtests"
.PP
.Vb 1
\&    $harness->runtests(@tests);
.Ve
.PP
Accepts an array of \f(CW@tests\fR to be run. This should generally be the
names of test files, but this is not required. Each element in \f(CW@tests\fR
will be passed to \f(CW\*(C`TAP::Parser::new()\*(C'\fR as a \f(CW\*(C`source\*(C'\fR. See
TAP::Parser for more information.
.PP
It is possible to provide aliases that will be displayed in place of the
test name by supplying the test as a reference to an array containing
\&\f(CW\*(C`[ $test, $alias ]\*(C'\fR:
.PP
.Vb 2
\&    $harness->runtests( [ 't/foo.t', 'Foo Once' ],
\&                        [ 't/foo.t', 'Foo Twice' ] );
.Ve
.PP
Normally it is an error to attempt to run the same test twice. Aliases
allow you to overcome this limitation by giving each run of the test a
unique name.
.PP
Tests will be run in the order found.
.PP
If the environment variable \f(CW\*(C`PERL_TEST_HARNESS_DUMP_TAP\*(C'\fR is defined it
should name a directory into which a copy of the raw \s-1TAP\s0 for each test
will be written. \s-1TAP\s0 is written to files named for each test.
Subdirectories will be created as needed.
.PP
Returns a TAP::Parser::Aggregator containing the test results.
.PP
\fI\f(CI\*(C`summary\*(C'\fI\fR
.IX Subsection "summary"
.PP
.Vb 1
\&  $harness->summary( $aggregator );
.Ve
.PP
Output the summary for a TAP::Parser::Aggregator.
.PP
\fI\f(CI\*(C`aggregate_tests\*(C'\fI\fR
.IX Subsection "aggregate_tests"
.PP
.Vb 1
\&  $harness->aggregate_tests( $aggregate, @tests );
.Ve
.PP
Run the named tests and display a summary of result. Tests will be run
in the order found.
.PP
Test results will be added to the supplied TAP::Parser::Aggregator.
\&\f(CW\*(C`aggregate_tests\*(C'\fR may be called multiple times to run several sets of
tests. Multiple \f(CW\*(C`Test::Harness\*(C'\fR instances may be used to pass results
to a single aggregator so that different parts of a complex test suite
may be run using different \f(CW\*(C`TAP::Harness\*(C'\fR settings. This is useful, for
example, in the case where some tests should run in parallel but others
are unsuitable for parallel execution.
.PP
.Vb 8
\&    my $formatter   = TAP::Formatter::Console->new;
\&    my $ser_harness = TAP::Harness->new( { formatter => $formatter } );
\&    my $par_harness = TAP::Harness->new(
\&        {   formatter => $formatter,
\&            jobs      => 9
\&        }
\&    );
\&    my $aggregator = TAP::Parser::Aggregator->new;
.Ve
.PP
.Vb 5
\&    $aggregator->start();
\&    $ser_harness->aggregate_tests( $aggregator, @ser_tests );
\&    $par_harness->aggregate_tests( $aggregator, @par_tests );
\&    $aggregator->stop();
\&    $formatter->summary($aggregator);
.Ve
.PP
Note that for simpler testing requirements it will often be possible to
replace the above code with a single call to \f(CW\*(C`runtests\*(C'\fR.
.PP
Each element of the \f(CW@tests\fR array is either:
.IP "* the source name of a test to run" 4
.IX Item "the source name of a test to run"
.PD 0
.IP "* a reference to a [ source name, display name ] array" 4
.IX Item "a reference to a [ source name, display name ] array"
.PD
.PP
In the case of a perl test suite, typically \fIsource names\fR are simply the file
names of the test scripts to run.
.PP
When you supply a separate display name it becomes possible to run a
test more than once; the display name is effectively the alias by which
the test is known inside the harness. The harness doesn't care if it
runs the same test more than once when each invocation uses a
different name.
.PP
\fI\f(CI\*(C`make_scheduler\*(C'\fI\fR
.IX Subsection "make_scheduler"
.PP
Called by the harness when it needs to create a
TAP::Parser::Scheduler. Override in a subclass to provide an
alternative scheduler. \f(CW\*(C`make_scheduler\*(C'\fR is passed the list of tests
that was passed to \f(CW\*(C`aggregate_tests\*(C'\fR.
.PP
\fI\f(CI\*(C`jobs\*(C'\fI\fR
.IX Subsection "jobs"
.PP
Gets or sets the number of concurrent test runs the harness is
handling.  By default, this value is 1 \*(-- for parallel testing, this
should be set higher.
.PP
\fI\f(CI\*(C`make_parser\*(C'\fI\fR
.IX Subsection "make_parser"
.PP
Make a new parser and display formatter session. Typically used and/or
overridden in subclasses.
.PP
.Vb 1
\&    my ( $parser, $session ) = $harness->make_parser;
.Ve
.PP
\fI\f(CI\*(C`finish_parser\*(C'\fI\fR
.IX Subsection "finish_parser"
.PP
Terminate use of a parser. Typically used and/or overridden in
subclasses. The parser isn't destroyed as a result of this.
.SH "CONFIGURING"
.IX Header "CONFIGURING"
\&\f(CW\*(C`TAP::Harness\*(C'\fR is designed to be easy to configure.
.Sh "Plugins"
.IX Subsection "Plugins"
\&\f(CW\*(C`TAP::Parser\*(C'\fR plugins let you change the way \s-1TAP\s0 is \fIinput\fR to and \fIoutput\fR
from the parser.
.PP
TAP::Parser::SourceHandlers handle \s-1TAP\s0 \fIinput\fR.  You can configure them
and load custom handlers using the \f(CW\*(C`sources\*(C'\fR parameter to \*(L"new\*(R".
.PP
TAP::Formatters handle \s-1TAP\s0 \fIoutput\fR.  You can load custom formatters by
using the \f(CW\*(C`formatter_class\*(C'\fR parameter to \*(L"new\*(R".  To configure a formatter,
you currently need to instantiate it outside of TAP::Harness and pass it in
with the \f(CW\*(C`formatter\*(C'\fR parameter to \*(L"new\*(R".  This \fImay\fR be addressed by adding
a \fIformatters\fR parameter to \*(L"new\*(R" in the future.
.ie n .Sh """Module::Build"""
.el .Sh "\f(CWModule::Build\fP"
.IX Subsection "Module::Build"
Module::Build version \f(CW0.30\fR supports \f(CW\*(C`TAP::Harness\*(C'\fR.
.PP
To load \f(CW\*(C`TAP::Harness\*(C'\fR plugins, you'll need to use the \f(CW\*(C`tap_harness_args\*(C'\fR
parameter to \f(CW\*(C`new\*(C'\fR, typically from your \f(CW\*(C`Build.PL\*(C'\fR.  For example:
.PP
.Vb 18
\&  Module::Build->new(
\&      module_name        => 'MyApp',
\&      test_file_exts     => [qw(.t .tap .txt)],
\&      use_tap_harness    => 1,
\&      tap_harness_args   => {
\&          sources => {
\&              MyCustom => {},
\&              File => {
\&                  extensions => ['.tap', '.txt'],
\&              },
\&          },
\&          formatter => 'TAP::Formatter::HTML',
\&      },
\&      build_requires     => {
\&          'Module::Build' => '0.30',
\&          'TAP::Harness'  => '3.18',
\&      },
\&  )->create_build_script;
.Ve
.PP
See \*(L"new\*(R"
.ie n .Sh """ExtUtils::MakeMaker"""
.el .Sh "\f(CWExtUtils::MakeMaker\fP"
.IX Subsection "ExtUtils::MakeMaker"
ExtUtils::MakeMaker does not support TAP::Harness out\-of\-the\-box.
.ie n .Sh """prove"""
.el .Sh "\f(CWprove\fP"
.IX Subsection "prove"
prove supports \f(CW\*(C`TAP::Harness\*(C'\fR plugins, and has a plugin system of its
own.  See \*(L"\s-1FORMATTERS\s0\*(R" in prove, \*(L"\s-1SOURCE\s0 \s-1HANDLERS\s0\*(R" in prove and App::Prove
for more details.
.SH "WRITING PLUGINS"
.IX Header "WRITING PLUGINS"
If you can't configure \f(CW\*(C`TAP::Harness\*(C'\fR to do what you want, and you can't find
an existing plugin, consider writing one.
.PP
The two primary use cases supported by TAP::Harness for plugins are \fIinput\fR
and \fIoutput\fR:
.IP "Customize how \s-1TAP\s0 gets into the parser" 2
.IX Item "Customize how TAP gets into the parser"
To do this, you can either extend an existing TAP::Parser::SourceHandler,
or write your own.  It's a pretty simple \s-1API\s0, and they can be loaded and
configured using the \f(CW\*(C`sources\*(C'\fR parameter to \*(L"new\*(R".
.IP "Customize how \s-1TAP\s0 results are output from the parser" 2
.IX Item "Customize how TAP results are output from the parser"
To do this, you can either extend an existing TAP::Formatter, or write your
own.  Writing formatters are a bit more involved than writing a
\&\fISourceHandler\fR, as you'll need to understand the TAP::Parser \s-1API\s0.  A
good place to start is by understanding how \*(L"aggregate_tests\*(R" works.
.Sp
Custom formatters can be loaded configured using the \f(CW\*(C`formatter_class\*(C'\fR
parameter to \*(L"new\*(R".
.SH "SUBCLASSING"
.IX Header "SUBCLASSING"
If you can't configure \f(CW\*(C`TAP::Harness\*(C'\fR to do exactly what you want, and writing
a plugin isn't an option, consider extending it.  It is designed to be (mostly)
easy to subclass, though the cases when sub-classing is necessary should be few
and far between.
.Sh "Methods"
.IX Subsection "Methods"
The following methods are ones you may wish to override if you want to
subclass \f(CW\*(C`TAP::Harness\*(C'\fR.
.ie n .IP """new""" 4
.el .IP "``new''" 4
.IX Item "new"
.PD 0
.ie n .IP """runtests""" 4
.el .IP "``runtests''" 4
.IX Item "runtests"
.ie n .IP """summary""" 4
.el .IP "``summary''" 4
.IX Item "summary"
.PD
.SH "REPLACING"
.IX Header "REPLACING"
If you like the \f(CW\*(C`prove\*(C'\fR utility and TAP::Parser but you want your
own harness, all you need to do is write one and provide \f(CW\*(C`new\*(C'\fR and
\&\f(CW\*(C`runtests\*(C'\fR methods. Then you can use the \f(CW\*(C`prove\*(C'\fR utility like so:
.PP
.Vb 1
\& prove --harness My::Test::Harness
.Ve
.PP
Note that while \f(CW\*(C`prove\*(C'\fR accepts a list of tests (or things to be
tested), \f(CW\*(C`new\*(C'\fR has a fairly rich set of arguments. You'll probably want
to read over this code carefully to see how all of them are being used.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Test::Harness
