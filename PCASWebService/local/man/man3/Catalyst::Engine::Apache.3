.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Catalyst::Engine::Apache 3"
.TH Catalyst::Engine::Apache 3 "2010-10-04" "perl v5.8.4" "User Contributed Perl Documentation"
.SH "NAME"
Catalyst::Engine::Apache \- Catalyst Apache Engines
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
For example Apache configurations, see the documentation for the engine that
corresponds to your Apache version.
.PP
\&\f(CW\*(C`Catalyst::Engine::Apache::MP13\*(C'\fR  \- mod_perl 1.3x
.PP
\&\f(CW\*(C`Catalyst::Engine::Apache2::MP19\*(C'\fR \- mod_perl 1.99x
.PP
\&\f(CW\*(C`Catalyst::Engine::Apache2::MP20\*(C'\fR \- mod_perl 2.x
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
These classes provide mod_perl support for Catalyst.
.SH "METHODS"
.IX Header "METHODS"
.Sh "$c\->engine\->apache"
.IX Subsection "$c->engine->apache"
Returns an \f(CW\*(C`Apache\*(C'\fR, \f(CW\*(C`Apache::RequestRec\*(C'\fR or \f(CW\*(C`Apache2::RequestRec\*(C'\fR object,
depending on your mod_perl version.  This method is also available as
\&\f(CW$c\fR\->apache.
.Sh "$c\->engine\->return"
.IX Subsection "$c->engine->return"
If you need to return something other than \s-1OK\s0 from the mod_perl handler,
you may set any other Apache constant in this method.  You should only use
this method if you know what you are doing or bad things may happen!
For example, to return \s-1DECLINED\s0 in mod_perl 2:
.PP
.Vb 2
\&    use Apache2::Const -compile => qw(DECLINED);
\&    $c->engine->return( Apache2::Const::DECLINED );
.Ve
.Sh "\s-1NOTES\s0 \s-1ABOUT\s0 \s-1LOCATIONMATCH\s0"
.IX Subsection "NOTES ABOUT LOCATIONMATCH"
The Apache engine tries to figure out the correct base path if your app is
running within a LocationMatch block.  For example:
.PP
.Vb 4
\&    <LocationMatch ^/match/(this|that)*>
\&        SetHandler          modperl
\&        PerlResponseHandler MyApp
\&    </LocationMatch>
.Ve
.PP
This will correctly set the base path to '/match/this/' or '/match/that/' depending
on which path was used for the request.
.PP
In some cases this may not be what you want, so you can disable this behavior
by adding this to your configuration:
.PP
.Vb 1
\&    PerlSetVar CatalystDisableLocationMatch 1
.Ve
.Sh "\s-1NOTES\s0 \s-1ON\s0 NON-STANDARD \s-1PORTS\s0"
.IX Subsection "NOTES ON NON-STANDARD PORTS"
If you wish to run your site on a non-standard port you will need to use the
\&\f(CW\*(C`Port\*(C'\fR Apache config rather than \f(CW\*(C`Listen\*(C'\fR. This will result in the correct
port being added to urls created using \f(CW\*(C`uri_for\*(C'\fR.
.PP
.Vb 1
\&    Port 8080
.Ve
.SH "OVERLOADED METHODS"
.IX Header "OVERLOADED METHODS"
This class overloads some methods from \f(CW\*(C`Catalyst::Engine\*(C'\fR.
.IP "prepare_request($r)" 4
.IX Item "prepare_request($r)"
.PD 0
.IP "prepare_connection" 4
.IX Item "prepare_connection"
.IP "prepare_query_parameters" 4
.IX Item "prepare_query_parameters"
.IP "prepare_headers" 4
.IX Item "prepare_headers"
.IP "prepare_path" 4
.IX Item "prepare_path"
.IP "read_chunk" 4
.IX Item "read_chunk"
.IP "finalize_body" 4
.IX Item "finalize_body"
.IP "finalize_headers" 4
.IX Item "finalize_headers"
.IP "write" 4
.IX Item "write"
.PD
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Catalyst Catalyst::Engine.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Sebastian Riedel <sri@cpan.org>
.IP "\(bu" 4
Christian Hansen <ch@ngmedia.com>
.IP "\(bu" 4
Andy Grundman <andy@hybridized.org>
.IP "\(bu" 4
Tomas Doran <bobtfish@bobtfish.net>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2010 by The \*(L"\s-1AUTHORS\s0\*(R".
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
