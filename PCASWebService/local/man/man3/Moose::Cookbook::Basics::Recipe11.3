.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Moose::Cookbook::Basics::Recipe11 3"
.TH Moose::Cookbook::Basics::Recipe11 3 "2010-11-24" "perl v5.8.4" "User Contributed Perl Documentation"
.SH "NAME"
Moose::Cookbook::Basics::Recipe11 \- Extending a non\-Moose base class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  package My::DateTime;
.Ve
.PP
.Vb 2
\&  use Moose;
\&  extends qw( DateTime Moose::Object );
.Ve
.PP
.Vb 1
\&  use DateTime::Calendar::Mayan;
.Ve
.PP
.Vb 9
\&  has 'mayan_date' => (
\&      is        => 'ro',
\&      isa       => 'DateTime::Calendar::Mayan',
\&      init_arg  => undef,
\&      lazy      => 1,
\&      builder   => '_build_mayan_date',
\&      clearer   => '_clear_mayan_date',
\&      predicate => 'has_mayan_date',
\&  );
.Ve
.PP
.Vb 2
\&  sub new {
\&      my $class = shift;
.Ve
.PP
.Vb 1
\&      my $obj = $class->SUPER::new(@_);
.Ve
.PP
.Vb 5
\&      return $class->meta->new_object(
\&          __INSTANCE__ => $obj,
\&          @_,
\&      );
\&  }
.Ve
.PP
.Vb 3
\&  after 'set' => sub {
\&      $_[0]->_clear_mayan_date;
\&  };
.Ve
.PP
.Vb 3
\&  sub _build_mayan_date {
\&      DateTime::Calendar::Mayan->from_object( object => $_[0] );
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This recipe demonstrates how to use Moose to subclass a parent which
is not Moose based. This recipe only works if the parent class uses a
blessed hash reference for object instances. If your parent is doing
something funkier, you should check out MooseX::InsideOut.
.PP
You might also want to check out MooseX::NonMoose, which does all
the grunt work for you.
.PP
There are a couple pieces worth noting:
.PP
.Vb 2
\&  use Moose;
\&  extends qw( DateTime Moose::Object );
.Ve
.PP
First, we \f(CW\*(C`use Moose\*(C'\fR just like we always do. This lets us declare
attributes and use all the Moose sugar to which we are accustomed.
.PP
The \f(CW\*(C`extends\*(C'\fR declaration explicitly include Moose::Object as well
as DateTime. This lets us use methods which are provided by
Moose::Object, like \f(CW\*(C`does\*(C'\fR.
.PP
The constructor demonstrates a particular hack/pattern (hacktern?) for
working with non-Moose parent classes:
.PP
.Vb 2
\&  sub new {
\&      my $class = shift;
.Ve
.PP
.Vb 1
\&      my $obj = $class->SUPER::new(@_);
.Ve
.PP
.Vb 5
\&      return $class->meta->new_object(
\&          __INSTANCE__ => $obj,
\&          @_,
\&      );
\&  }
.Ve
.PP
We explicitly call \f(CW\*(C`$class\->meta\->new_object\*(C'\fR and pass the
already-created object in the \f(CW\*(C`_\|_INSTANCE_\|_\*(C'\fR key. Internally, Moose
will take the existing object and initialize any attributes defined in
our subclass.
.PP
The \f(CW\*(C`after\*(C'\fR modifier works just like we'd expect. The fact that
\&\f(CW\*(C`set\*(C'\fR is defined in our non-Moose parent does not matter.
.SH "CONCLUSION"
.IX Header "CONCLUSION"
Moose can play nice with non-Moose classes when you follow the pattern
shown here. Your subclass has access to all the power of Moose,
including attribute declaration, method modifiers, type constraints
(for new attributes), and roles.
.PP
However, you won't be able to easily override a parent's \*(L"attributes\*(R",
since they're not Moose attributes. Nor will you be able to inline a
constructor, since you need to explicitly use the metaclass's object
constructor.
.SH "AUTHOR"
.IX Header "AUTHOR"
Dave Rolsky <autarch@urth.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2009\-2010 by Infinity Interactive, Inc.
.PP
<http://www.iinteractive.com>
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
