.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Spreadsheet::ParseExcel::SaveParser 3"
.TH Spreadsheet::ParseExcel::SaveParser 3 "2010-09-17" "perl v5.8.4" "User Contributed Perl Documentation"
.SH "NAME"
Spreadsheet::ParseExcel::SaveParser \- Rewrite an existing Excel file.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Say we start with an Excel file that looks like this:
.PP
.Vb 8
\&    -----------------------------------------------------
\&   |   |      A      |      B      |      C      |
\&    -----------------------------------------------------
\&   | 1 | Hello       | ...         | ...         |  ...
\&   | 2 | World       | ...         | ...         |  ...
\&   | 3 | *Bold text* | ...         | ...         |  ...
\&   | 4 | ...         | ...         | ...         |  ...
\&   | 5 | ...         | ...         | ...         |  ...
.Ve
.PP
Then we process it with the following program:
.PP
.Vb 1
\&    #!/usr/bin/perl
.Ve
.PP
.Vb 2
\&    use strict;
\&    use warnings;
.Ve
.PP
.Vb 2
\&    use Spreadsheet::ParseExcel;
\&    use Spreadsheet::ParseExcel::SaveParser;
.Ve
.PP
.Vb 3
\&    # Open an existing file with SaveParser
\&    my $parser   = Spreadsheet::ParseExcel::SaveParser->new();
\&    my $template = $parser->Parse('template.xls');
.Ve
.PP
.Vb 4
\&    # Get the first worksheet.
\&    my $worksheet = $template->worksheet(0);
\&    my $row  = 0;
\&    my $col  = 0;
.Ve
.PP
.Vb 2
\&    # Overwrite the string in cell A1
\&    $worksheet->AddCell( $row, $col, 'New string' );
.Ve
.PP
.Vb 2
\&    # Add a new string in cell B1
\&    $worksheet->AddCell( $row, $col + 1, 'Newer' );
.Ve
.PP
.Vb 3
\&    # Add a new string in cell C1 with the format from cell A3.
\&    my $cell = $worksheet->get_cell( $row + 2, $col );
\&    my $format_number = $cell->{FormatNo};
.Ve
.PP
.Vb 1
\&    $worksheet->AddCell( $row, $col + 2, 'Newest', $format_number );
.Ve
.PP
.Vb 2
\&    # Write over the existing file or write a new file.
\&    $template->SaveAs('newfile.xls');
.Ve
.PP
We should now have an Excel file that looks like this:
.PP
.Vb 8
\&    -----------------------------------------------------
\&   |   |      A      |      B      |      C      |
\&    -----------------------------------------------------
\&   | 1 | New string  | Newer       | *Newest*    |  ...
\&   | 2 | World       | ...         | ...         |  ...
\&   | 3 | *Bold text* | ...         | ...         |  ...
\&   | 4 | ...         | ...         | ...         |  ...
\&   | 5 | ...         | ...         | ...         |  ...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`Spreadsheet::ParseExcel::SaveParser\*(C'\fR module rewrite an existing Excel file by reading it with \f(CW\*(C`Spreadsheet::ParseExcel\*(C'\fR and rewriting it with \f(CW\*(C`Spreadsheet::WriteExcel\*(C'\fR.
.SH "METHODS"
.IX Header "METHODS"
.SH "Parser"
.IX Header "Parser"
.Sh "\fInew()\fP"
.IX Subsection "new()"
.Vb 1
\&    $parse = new Spreadsheet::ParseExcel::SaveParser();
.Ve
.PP
Constructor.
.Sh "\fIParse()\fP"
.IX Subsection "Parse()"
.Vb 1
\&    $workbook = $parse->Parse($sFileName);
.Ve
.PP
.Vb 1
\&    $workbook = $parse->Parse($sFileName , $formatter);
.Ve
.PP
Returns a \*(L"Workbook\*(R" object. If an error occurs, returns undef.
.PP
The optional \f(CW$formatter\fR is a Formatter Class to format the value of cells.
.SH "Workbook"
.IX Header "Workbook"
The \f(CW\*(C`Parse()\*(C'\fR method returns a \f(CW\*(C`Spreadsheet::ParseExcel::SaveParser::Workbook\*(C'\fR object.
.PP
This is a subclass of the Spreadsheet::ParseExcel::Workbook and has the following methods:
.Sh "\fIworksheets()\fP"
.IX Subsection "worksheets()"
Returns an array of \*(L"Worksheet\*(R" objects. This was most commonly used to iterate over the worksheets in a workbook:
.PP
.Vb 3
\&    for my $worksheet ( $workbook->worksheets() ) {
\&        ...
\&    }
.Ve
.Sh "\fIworksheet()\fP"
.IX Subsection "worksheet()"
The \f(CW\*(C`worksheet()\*(C'\fR method returns a single \f(CW\*(C`Worksheet\*(C'\fR object using either its name or index:
.PP
.Vb 2
\&    $worksheet = $workbook->worksheet('Sheet1');
\&    $worksheet = $workbook->worksheet(0);
.Ve
.PP
Returns \f(CW\*(C`undef\*(C'\fR if the sheet name or index doesn't exist.
.Sh "\fIAddWorksheet()\fP"
.IX Subsection "AddWorksheet()"
.Vb 1
\&    $workbook = $workbook->AddWorksheet($name, %properties);
.Ve
.PP
Create a new Worksheet object of type \f(CW\*(C`Spreadsheet::ParseExcel::Worksheet\*(C'\fR.
.PP
The \f(CW%properties\fR hash contains the properties of new Worksheet.
.Sh "AddFont"
.IX Subsection "AddFont"
.Vb 1
\&    $workbook = $workbook->AddFont(%properties);
.Ve
.PP
Create new Font object of type \f(CW\*(C`Spreadsheet::ParseExcel::Font\*(C'\fR.
.PP
The \f(CW%properties\fR hash contains the properties of new Font.
.Sh "AddFormat"
.IX Subsection "AddFormat"
.Vb 1
\&    $workbook = $workbook->AddFormat(%properties);
.Ve
.PP
The \f(CW%properties\fR hash contains the properties of new Font.
.SH "Worksheet"
.IX Header "Worksheet"
Spreadsheet::ParseExcel::SaveParser::Worksheet
.PP
Worksheet is a subclass of Spreadsheet::ParseExcel::Worksheet.
And has these methods :
.PP
The \f(CW\*(C`Worksbook::worksheet()\*(C'\fR method returns a \f(CW\*(C`Spreadsheet::ParseExcel::SaveParser::Worksheet\*(C'\fR object.
.PP
This is a subclass of the Spreadsheet::ParseExcel::Worksheet and has the following methods:
.SH "AddCell"
.IX Header "AddCell"
.Vb 1
\&    $workbook = $worksheet->AddCell($row, $col, $value, $format [$encoding]);
.Ve
.PP
Create new Cell object of type \f(CW\*(C`Spreadsheet::ParseExcel::Cell\*(C'\fR.
.PP
The \f(CW$format\fR parameter is the format number rather than a full format object.
.PP
To specify just same as another cell,
you can set it like below:
.PP
.Vb 5
\&    $row            = 0;
\&    $col            = 0;
\&    $worksheet      = $template->worksheet(0);
\&    $cell           = $worksheet->get_cell( $row, $col );
\&    $format_number  = $cell->{FormatNo};
.Ve
.PP
.Vb 1
\&    $worksheet->AddCell($row +1, $coll, 'New data', $format_number);
.Ve
.SH "TODO"
.IX Header "TODO"
Please note that this module is currently (versions 0.50\-0.60) undergoing a major
restructuring and rewriting.
.SH "Known Problems"
.IX Header "Known Problems"
You can only rewrite the features that Spreadsheet::WriteExcel supports so
macros, graphs and some other features in the original Excel file will be lost.
Also, formulas aren't rewritten, only the result of a formula is written.
.PP
Only last print area will remain. (Others will be removed)
.SH "AUTHOR"
.IX Header "AUTHOR"
Maintainer 0.40+: John McNamara jmcnamara@cpan.org
.PP
Maintainer 0.27\-0.33: Gabor Szabo szabgab@cpan.org
.PP
Original author: Kawai Takanori kwitknr@cpan.org
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2009\-2010 John McNamara
.PP
Copyright (c) 2006\-2008 Gabor Szabo
.PP
Copyright (c) 2000\-2002 Kawai Takanori and Nippon-RAD Co. \s-1OP\s0 Division
.PP
All rights reserved.
.PP
You may distribute under the terms of either the \s-1GNU\s0 General Public License or the Artistic License, as specified in the Perl \s-1README\s0 file.
